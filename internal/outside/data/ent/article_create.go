// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"gitlab.com/mcsolutions/find-psy/back/article-v1/internal/outside/data/ent/article"
)

// ArticleCreate is the builder for creating a Article entity.
type ArticleCreate struct {
	config
	mutation *ArticleMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (ac *ArticleCreate) SetEmail(s string) *ArticleCreate {
	ac.mutation.SetEmail(s)
	return ac
}

// SetUserName sets the "user_name" field.
func (ac *ArticleCreate) SetUserName(s string) *ArticleCreate {
	ac.mutation.SetUserName(s)
	return ac
}

// SetTitle sets the "title" field.
func (ac *ArticleCreate) SetTitle(s string) *ArticleCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetLatinized sets the "latinized" field.
func (ac *ArticleCreate) SetLatinized(s string) *ArticleCreate {
	ac.mutation.SetLatinized(s)
	return ac
}

// SetHTML sets the "html" field.
func (ac *ArticleCreate) SetHTML(s string) *ArticleCreate {
	ac.mutation.SetHTML(s)
	return ac
}

// SetShortText sets the "short_text" field.
func (ac *ArticleCreate) SetShortText(s string) *ArticleCreate {
	ac.mutation.SetShortText(s)
	return ac
}

// SetLang sets the "lang" field.
func (ac *ArticleCreate) SetLang(s string) *ArticleCreate {
	ac.mutation.SetLang(s)
	return ac
}

// SetTags sets the "tags" field.
func (ac *ArticleCreate) SetTags(s string) *ArticleCreate {
	ac.mutation.SetTags(s)
	return ac
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableTags(s *string) *ArticleCreate {
	if s != nil {
		ac.SetTags(*s)
	}
	return ac
}

// SetB17Account sets the "b17_account" field.
func (ac *ArticleCreate) SetB17Account(s string) *ArticleCreate {
	ac.mutation.SetB17Account(s)
	return ac
}

// SetNillableB17Account sets the "b17_account" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableB17Account(s *string) *ArticleCreate {
	if s != nil {
		ac.SetB17Account(*s)
	}
	return ac
}

// SetSource sets the "source" field.
func (ac *ArticleCreate) SetSource(s string) *ArticleCreate {
	ac.mutation.SetSource(s)
	return ac
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableSource(s *string) *ArticleCreate {
	if s != nil {
		ac.SetSource(*s)
	}
	return ac
}

// SetIsPublished sets the "is_published" field.
func (ac *ArticleCreate) SetIsPublished(b bool) *ArticleCreate {
	ac.mutation.SetIsPublished(b)
	return ac
}

// SetNillableIsPublished sets the "is_published" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableIsPublished(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetIsPublished(*b)
	}
	return ac
}

// SetCdate sets the "cdate" field.
func (ac *ArticleCreate) SetCdate(t time.Time) *ArticleCreate {
	ac.mutation.SetCdate(t)
	return ac
}

// SetNillableCdate sets the "cdate" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableCdate(t *time.Time) *ArticleCreate {
	if t != nil {
		ac.SetCdate(*t)
	}
	return ac
}

// SetUdate sets the "udate" field.
func (ac *ArticleCreate) SetUdate(t time.Time) *ArticleCreate {
	ac.mutation.SetUdate(t)
	return ac
}

// SetNillableUdate sets the "udate" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableUdate(t *time.Time) *ArticleCreate {
	if t != nil {
		ac.SetUdate(*t)
	}
	return ac
}

// SetPubDate sets the "pub_date" field.
func (ac *ArticleCreate) SetPubDate(t time.Time) *ArticleCreate {
	ac.mutation.SetPubDate(t)
	return ac
}

// SetNillablePubDate sets the "pub_date" field if the given value is not nil.
func (ac *ArticleCreate) SetNillablePubDate(t *time.Time) *ArticleCreate {
	if t != nil {
		ac.SetPubDate(*t)
	}
	return ac
}

// SetIsProcessed sets the "is_processed" field.
func (ac *ArticleCreate) SetIsProcessed(b bool) *ArticleCreate {
	ac.mutation.SetIsProcessed(b)
	return ac
}

// SetNillableIsProcessed sets the "is_processed" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableIsProcessed(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetIsProcessed(*b)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ArticleCreate) SetID(u uuid.UUID) *ArticleCreate {
	ac.mutation.SetID(u)
	return ac
}

// Mutation returns the ArticleMutation object of the builder.
func (ac *ArticleCreate) Mutation() *ArticleMutation {
	return ac.mutation
}

// Save creates the Article in the database.
func (ac *ArticleCreate) Save(ctx context.Context) (*Article, error) {
	var (
		err  error
		node *Article
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArticleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ArticleCreate) SaveX(ctx context.Context) *Article {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ArticleCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ArticleCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ArticleCreate) defaults() {
	if _, ok := ac.mutation.IsPublished(); !ok {
		v := article.DefaultIsPublished
		ac.mutation.SetIsPublished(v)
	}
	if _, ok := ac.mutation.Cdate(); !ok {
		v := article.DefaultCdate()
		ac.mutation.SetCdate(v)
	}
	if _, ok := ac.mutation.IsProcessed(); !ok {
		v := article.DefaultIsProcessed
		ac.mutation.SetIsProcessed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ArticleCreate) check() error {
	if _, ok := ac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Article.email"`)}
	}
	if _, ok := ac.mutation.UserName(); !ok {
		return &ValidationError{Name: "user_name", err: errors.New(`ent: missing required field "Article.user_name"`)}
	}
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Article.title"`)}
	}
	if _, ok := ac.mutation.Latinized(); !ok {
		return &ValidationError{Name: "latinized", err: errors.New(`ent: missing required field "Article.latinized"`)}
	}
	if _, ok := ac.mutation.HTML(); !ok {
		return &ValidationError{Name: "html", err: errors.New(`ent: missing required field "Article.html"`)}
	}
	if _, ok := ac.mutation.ShortText(); !ok {
		return &ValidationError{Name: "short_text", err: errors.New(`ent: missing required field "Article.short_text"`)}
	}
	if _, ok := ac.mutation.Lang(); !ok {
		return &ValidationError{Name: "lang", err: errors.New(`ent: missing required field "Article.lang"`)}
	}
	if v, ok := ac.mutation.Lang(); ok {
		if err := article.LangValidator(v); err != nil {
			return &ValidationError{Name: "lang", err: fmt.Errorf(`ent: validator failed for field "Article.lang": %w`, err)}
		}
	}
	if _, ok := ac.mutation.IsPublished(); !ok {
		return &ValidationError{Name: "is_published", err: errors.New(`ent: missing required field "Article.is_published"`)}
	}
	if _, ok := ac.mutation.Cdate(); !ok {
		return &ValidationError{Name: "cdate", err: errors.New(`ent: missing required field "Article.cdate"`)}
	}
	if _, ok := ac.mutation.IsProcessed(); !ok {
		return &ValidationError{Name: "is_processed", err: errors.New(`ent: missing required field "Article.is_processed"`)}
	}
	return nil
}

func (ac *ArticleCreate) sqlSave(ctx context.Context) (*Article, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *ArticleCreate) createSpec() (*Article, *sqlgraph.CreateSpec) {
	var (
		_node = &Article{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: article.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: article.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := ac.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ac.mutation.Latinized(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldLatinized,
		})
		_node.Latinized = value
	}
	if value, ok := ac.mutation.HTML(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldHTML,
		})
		_node.HTML = value
	}
	if value, ok := ac.mutation.ShortText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldShortText,
		})
		_node.ShortText = value
	}
	if value, ok := ac.mutation.Lang(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldLang,
		})
		_node.Lang = value
	}
	if value, ok := ac.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldTags,
		})
		_node.Tags = &value
	}
	if value, ok := ac.mutation.B17Account(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldB17Account,
		})
		_node.B17Account = &value
	}
	if value, ok := ac.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldSource,
		})
		_node.Source = &value
	}
	if value, ok := ac.mutation.IsPublished(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: article.FieldIsPublished,
		})
		_node.IsPublished = value
	}
	if value, ok := ac.mutation.Cdate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: article.FieldCdate,
		})
		_node.Cdate = value
	}
	if value, ok := ac.mutation.Udate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: article.FieldUdate,
		})
		_node.Udate = &value
	}
	if value, ok := ac.mutation.PubDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: article.FieldPubDate,
		})
		_node.PubDate = &value
	}
	if value, ok := ac.mutation.IsProcessed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: article.FieldIsProcessed,
		})
		_node.IsProcessed = value
	}
	return _node, _spec
}

// ArticleCreateBulk is the builder for creating many Article entities in bulk.
type ArticleCreateBulk struct {
	config
	builders []*ArticleCreate
}

// Save creates the Article entities in the database.
func (acb *ArticleCreateBulk) Save(ctx context.Context) ([]*Article, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Article, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ArticleCreateBulk) SaveX(ctx context.Context) []*Article {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ArticleCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ArticleCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
